
/*
BEGIN
 USRASSISTENTEFISCAL.SP_ExcedenteMG('535','01/11/2016','DD/MM/YYYY');
END;

--select * from table(USRASSISTENTEFISCAL.FN_EXCEDENTE_ENT('535',TO_DATE('2016/11/05','YYYY/MM/DD'),'R00000268898'))
*/

4002 0022 
0800 5700022

CREATE OR REPLACE PROCEDURE USRASSISTENTEFISCAL.SP_ExcedenteMG(P_FILIAL VARCHAR2, DT_INICIAL VARCHAR2, FORMATO VARCHAR2)
AS
    V_VL_BC_ST_UNIT                   NUMBER(19,2) := 0;
	V_VL_BC_ST_UNIT_MEDIO             NUMBER(19,2) := 0;
    V_VL_BC_ST_ACORDO_VENDIDA         NUMBER(19,2) := 0;
    V_VL_DIFERENCA_ENTRE_BASE         NUMBER(19,2) := 0;
    V_VL_CREDITO                      NUMBER(19,2) := 0;
    V_VL_SALDO_SAIDA                  NUMBER(19,2) := 0;
	V_VL_SALDO_REF_ESTOQUE_CD         NUMBER(19,2) := 0;
    V_VL_ESTOQUE                      NUMBER(19,2) := 0;

    V_DET_ID                          INT          := 0;
    V_REC_ID                          INT          := 0;
    V_ID_ENTRADA                      INT          := 0;
	V_REF_ID_ENTRADA                  INT          := 0;

    V_ENCONTROU_ENTRADA               INT          := 0;
	V_BUSCA_ENTRADA                   INT          := 0;

    V_VL_MEDIO                        NUMBER(19,2) := 0;
    V_VL_BASE_ACUMULADO               NUMBER(19,2) := 0;
	V_VL_BASE_ST_CALCULADA            NUMBER(19,2) := 0;
	V_VL_BASE_ST_CALCULADA_ACUMULADO  NUMBER(19,2) := 0;
    V_VL_QTD_ACUMULADO                NUMBER(19,2) := 0;
	V_ALIQ_ST                         NUMBER(15,4) := 0;

	V_VL_BASE_ACUMULADO_CD            NUMBER(19,2) := 0;
	V_VL_QTD_ACUMULADO_CD             NUMBER(19,2) := 0;
	
	V_VL_ICMS_CD                      NUMBER(19,2) := 0;
	V_VL_ST_CD                        NUMBER(19,2) := 0;
	V_VL_BC_ST_CD                     NUMBER(19,2) := 0;
	V_VL_BC_ICMS_CD                   NUMBER(19,2) := 0;
	V_SOMA_BC_ST_UNIT_CD              NUMBER(19,2) := 0;
	V_QTD_NOTA_CD                     INT;

	V_VL_ESTOQUE_INICIAL              NUMBER(22,4) := 0;
    V_VL_ESTOQUE_ACUMULADO            NUMBER(22,4) := 0;

	V_NOTA_JA_ASSOCIADA               INT          := 0;

	V_VL_BC_ST_UNIT_MEDIO_JA_ASSOCIADO NUMBER(19,2) := 0;
	V_VL_BASE_ACUMULADO_JA_ASSOCIADO   NUMBER(19,2) := 0;
	V_VL_QTD_ACUMULADO_JA_ASSOCIADO    NUMBER(19,2) := 0;
	V_VL_BC_ST_JA_ASSOCIADO            NUMBER(19,2) := 0;
	V_DET_ID_JA_ASSOCIADO        	   INT 			:= 0;
	
	V_VL_BC_ST_ANTERIOR                NUMBER(19,2) := 0;
	V_VL_QTD_ANTERIOR                  NUMBER(19,2) := 0;
	
	V_QTD_REF							INT 		:= 0;
	V_REF								INT 		:= 0;
	
	V_DATA_CORTE						DATE;

  /*
    CURSOR CUR_MERCADORIA IS SELECT '535' AS FILIAL, MERC_CODIGO
               FROM USRASSISTENTEFISCAL.GBA_MERC_Excedente_MG
       --  WHERE MERC_CODIGO = 'R00001105693'
               --WHERE MERC_CODIGO IN('R00000264228','R00001099264','R00000303812','R00000500210','R00000120650')
               --WHERE MERC_CODIGO IN('R00001099182','R00001100529','R00001437112','R00000221888','R00001597035','R00000114732')
               ORDER BY MERC_CODIGO;
  */

  CURSOR CUR_MERCADORIA IS
              SELECT
                DISTINCT  FILIAL, EST_CODIGO, MERC_CODIGO
              FROM USRASSISTENTEFISCAL.GBA_RECUP_ST_SAIDA_EXCEDENTE
              WHERE
                FILIAL = P_FILIAL
                AND DATA between to_date(DT_INICIAL, FORMATO) AND LAST_DAY(TO_DATE(DT_INICIAL, FORMATO));

  MERCADORIA  CUR_MERCADORIA%ROWTYPE;

BEGIN

  /*
  -- Pegar o último REC_ID para manter a sequência
  SELECT
    MAX(REC_ID) INTO V_REC_ID
  FROM USRASSISTENTEFISCAL.Excedente_MG_MERC;

  SELECT
    MAX(ID) INTO V_ID_ENTRADA
  FROM USRASSISTENTEFISCAL.EXCEDENTE_MG_ENTRADA_DET;
  */

  OPEN CUR_MERCADORIA;
  LOOP
    FETCH CUR_MERCADORIA INTO MERCADORIA;
    EXIT WHEN CUR_MERCADORIA%NOTFOUND;
    BEGIN

		select USRASSISTENTEFISCAL.SEQ_Excedente_MG_MERC.NEXTVAL INTO V_REC_ID from dual;

    --V_REC_ID                        := NVL(V_REC_ID,0) + 1;
    V_DET_ID                      		:= 0;

    V_VL_ESTOQUE                        := 0;
    V_VL_BC_ST_UNIT                   	:= 0;
    V_VL_BC_ST_UNIT_MEDIO             	:= 0;
    V_VL_ESTOQUE_ACUMULADO            	:= 0;
	
    V_VL_QTD_ACUMULADO_CD             	:= 0;
    V_VL_BASE_ACUMULADO_CD            	:= 0;
	
    V_VL_BASE_ST_CALCULADA            	:= 0;
    V_VL_BASE_ST_CALCULADA_ACUMULADO    := 0;
    V_NOTA_JA_ASSOCIADA               	:= 0;
    V_VL_BC_ST_UNIT_MEDIO_JA_ASSOCIADO  := 0;
    V_VL_BASE_ACUMULADO_JA_ASSOCIADO    := 0;
    V_VL_QTD_ACUMULADO_JA_ASSOCIADO     := 0;
    V_VL_BC_ST_JA_ASSOCIADO           	:= 0;
	V_DET_ID_JA_ASSOCIADO         		:= 0;

    V_VL_BC_ST_ANTERIOR               	:= 0;
    V_VL_QTD_ANTERIOR               	:= 0;
	V_QTD_REF 							:= 0;
	V_REF 								:= 0;
   
   -- Verifica se a mercadoria possui referência no último mês.
    BEGIN
      SELECT
        ESTOQUE_FINAL,BASE_ST_ACUMULADA,VOLUME_ACUMULADO INTO  V_VL_ESTOQUE_INICIAL, V_VL_BC_ST_ANTERIOR, V_VL_QTD_ANTERIOR
      FROM
      (
        SELECT
			S.ESTOQUE_FINAL, S.BASE_ST_ACUMULADA, S.VOLUME_ACUMULADO
        FROM USRASSISTENTEFISCAL.Excedente_MG_MERC S
        WHERE
          S.FILIAL          = MERCADORIA.FILIAL
          AND S.MERC_CODIGO = MERCADORIA.MERC_CODIGO
          AND S.DT_INICIO   < to_date(DT_INICIAL, FORMATO)
        ORDER BY S.DT_INICIO DESC
      ) WHERE ROWNUM < 2;

      EXCEPTION WHEN NO_DATA_FOUND THEN BEGIN V_VL_ESTOQUE_INICIAL := 0; V_VL_BC_ST_ANTERIOR := 0; V_VL_QTD_ANTERIOR := 0;  END;
    END;

	--calcular a média a cada mês. Alterado dia 12/06/2023, após reunião com Karina e Lucas Barbosa.
    V_VL_BASE_ACUMULADO := 0;
    V_VL_QTD_ACUMULADO  := 0;

	V_DATA_CORTE := NULL;
	-- INVENTARIO
	USRASSISTENTEFISCAL.FN_EXCEDENTE_INVENTARIO(MERCADORIA.FILIAL, MERCADORIA.MERC_CODIGO, to_date(DT_INICIAL, FORMATO), V_DATA_CORTE);
	
    -- Início Associando a Saída do Item a última entrada
    FOR NF_SAIDA IN ( SELECT * 
					  FROM USRASSISTENTEFISCAL.GBA_RECUP_ST_SAIDA_EXCEDENTE 
					  WHERE 
							DATA 			between to_date(DT_INICIAL, FORMATO) AND LAST_DAY(TO_DATE(DT_INICIAL, FORMATO)) 
							AND FILIAL 		= MERCADORIA.FILIAL 
							AND MERC_CODIGO = MERCADORIA.MERC_CODIGO 
					  ORDER BY DATA ASC 
	)
    LOOP
    BEGIN
        V_DET_ID                := NVL(V_DET_ID,0) + 1;
        V_VL_SALDO_SAIDA        := NF_SAIDA.VOLUME;
        V_ENCONTROU_ENTRADA     := 0;
		
      -- Registra a saída
      INSERT INTO USRASSISTENTEFISCAL.EXCEDENTE_MG_SAIDA_DET VALUES(V_REC_ID,V_DET_ID,NF_SAIDA.empresa,NF_SAIDA.uf,NF_SAIDA.filial,NF_SAIDA.data,NF_SAIDA.dof_numero,NF_SAIDA.dof_import_numero,NF_SAIDA.merc_codigo,NF_SAIDA.descricao,NF_SAIDA.num_item,NF_SAIDA.STC_CODIGO,NF_SAIDA.cfop_codigo,NF_SAIDA.qtd,NF_SAIDA.vl_unitario,NF_SAIDA.volume,NF_SAIDA.vl_contabil,null,null,null,null,NF_SAIDA.status,SYSDATE,NULL);

      V_BUSCA_ENTRADA := 1;

      -- INÍCIA BUSCA ÚLTIMA ENTRADA E CONTROLE DO ESTOQUE
      WHILE V_VL_SALDO_SAIDA > 0 AND V_BUSCA_ENTRADA = 1
      LOOP
        BEGIN
          V_BUSCA_ENTRADA := 0;

          -- BUSCA ÚLTIMA ENTRADA NA LOJA
          FOR NF_ENTRADA IN (select * from table(USRASSISTENTEFISCAL.FN_EXCEDENTE_ENT(NF_SAIDA.FILIAL, NF_SAIDA.DATA,V_DATA_CORTE,NF_SAIDA.MERC_CODIGO)) )
          LOOP
          BEGIN
				V_ENCONTROU_ENTRADA := 1;
				V_BUSCA_ENTRADA     := 1;

				IF V_DATA_CORTE <> NF_ENTRADA.DT_FATO_GERADOR_IMPOSTO
				THEN
					BEGIN
						UPDATE USRASSISTENTEFISCAL.GBA_EXCEDENTE_ENT_INVENTARIO 
							SET	DT_PARTIDA = NF_ENTRADA.DT_FATO_GERADOR_IMPOSTO
						WHERE 
							FILIAL 				= NF_SAIDA.FILIAL
							AND DT_LANCAMENTO 	= to_date(DT_INICIAL, FORMATO)
							AND MERC_CODIGO 	= NF_SAIDA.MERC_CODIGO;
							
						V_DATA_CORTE := NF_ENTRADA.DT_FATO_GERADOR_IMPOSTO;
					END;		
				END IF;
				-- Fluxo Normal
				
				IF NF_ENTRADA.ESTOQUE >= V_VL_SALDO_SAIDA
				THEN
				  BEGIN
					  V_VL_ESTOQUE     			:= NF_ENTRADA.ESTOQUE - V_VL_SALDO_SAIDA;
					  V_VL_SALDO_REF_ESTOQUE_CD := V_VL_SALDO_SAIDA;
					  V_VL_SALDO_SAIDA 			:=  0;
				  END;
				ELSE
				  BEGIN
					  V_VL_ESTOQUE     			:= 0;
					  V_VL_SALDO_SAIDA 			:= V_VL_SALDO_SAIDA - NF_ENTRADA.ESTOQUE;
					  V_VL_SALDO_REF_ESTOQUE_CD := NF_ENTRADA.ESTOQUE;
				  END;
				END IF;

				IF NVL(NF_ENTRADA.VOLUME,0)  <> 0 THEN V_VL_BC_ST_UNIT := NF_ENTRADA.VL_BASE_ST / NF_ENTRADA.VOLUME;  ELSE V_VL_BC_ST_UNIT := 0;   END IF;

				IF NF_ENTRADA.ATUALIZAR_ESTOQUE = 1
				THEN
				  BEGIN
					  UPDATE USRASSISTENTEFISCAL.EXCEDENTE_MG_ENTRADA_DET
						SET ESTOQUE = V_VL_ESTOQUE
					  WHERE
						ID = NF_ENTRADA.ID;

					  V_REF_ID_ENTRADA := NF_ENTRADA.ID;
					  
					  BEGIN
							SELECT
								ID_COUNT
								INTO
								   V_REF
							FROM
								USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT
								where REC_ID 		 = V_REC_ID
									  AND ID_ENTRADA = V_REF_ID_ENTRADA
									  AND ROWNUM < 2;

							EXCEPTION
							WHEN NO_DATA_FOUND THEN
								BEGIN
								  V_REF := 0;
								END;
					  END;

					  IF NVL(V_REF,0) = 0
					  THEN
						BEGIN	
							V_QTD_REF := V_QTD_REF + 1;
							V_REF     := V_QTD_REF;
						END;
					  END IF;
					  
					  INSERT INTO USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT(REC_ID,DET_ID,ID_ENTRADA,filial,MERC_CODIGO,volume,ESTOQUE,VL_BC_ST,VL_BC_ST_UNIT,DT_FATO_GERADOR,DT_REGISTRO,FAZ_PARTE_PEDIDO,VL_BC_ST_UNIT_MEDIO,VL_BASE_ACUMULADA, QTD_ACUMULADA,SALDO_SAIDA,ID_COUNT) VALUES(V_REC_ID,V_DET_ID,NF_ENTRADA.ID,NF_ENTRADA.FILIAL,NF_SAIDA.MERC_CODIGO,NF_ENTRADA.VOLUME,V_VL_ESTOQUE,V_VL_BC_ST_JA_ASSOCIADO,V_VL_BC_ST_UNIT,NF_ENTRADA.dt_fato_gerador_imposto,SYSDATE,'S',V_VL_BC_ST_UNIT_MEDIO,V_VL_BASE_ACUMULADO,V_VL_QTD_ACUMULADO,V_VL_SALDO_SAIDA,V_REF);

					  --INSERT INTO USRASSISTENTEFISCAL.Excedente_MG_LOG VALUES(V_REC_ID,V_DET_ID,NF_ENTRADA.ID,'LOJA PASSO UPDATE',NF_SAIDA.FILIAL,NF_SAIDA.MERC_CODIGO,NF_SAIDA.DATA,NF_ENTRADA.ESTOQUE,NF_SAIDA.VOLUME,V_VL_SALDO_SAIDA,V_VL_ESTOQUE,NF_ENTRADA.ATUALIZAR_ESTOQUE);
				   END;
				 ELSE
				   BEGIN
					   select USRASSISTENTEFISCAL.SEQ_EXCEDENTE_MG_ENTRADA_DET.NEXTVAL INTO V_ID_ENTRADA from dual;

					   V_REF_ID_ENTRADA := V_ID_ENTRADA;
						V_QTD_REF 		:= V_QTD_REF + 1;
						
						IF NF_ENTRADA.ID = '-1'
						THEN
							BEGIN
								UPDATE USRASSISTENTEFISCAL.EXCEDENTE_MG_ENTRADA_DET
									SET ATIVO = '0'
								WHERE ATIVO 			   = '1' 
									 AND DOF_IMPORT_NUMERO = NF_ENTRADA.DOF_IMPORT_NUMERO
									 AND MERC_CODIGO	   = NF_ENTRADA.MERC_CODIGO;
							END;
						END IF;
						
					   INSERT INTO USRASSISTENTEFISCAL.EXCEDENTE_MG_ENTRADA_DET VALUES(V_ID_ENTRADA,NF_ENTRADA.dof_sequence,NF_ENTRADA.dof_numero,NF_ENTRADA.dof_import_numero,NF_ENTRADA.EDOF_CODIGO,NF_ENTRADA.mdof_codigo,NF_ENTRADA.serie,NF_ENTRADA.filial,NF_ENTRADA.INFORMANTE_EST_CODIGO,NF_ENTRADA.cpf_cgc,NF_ENTRADA.cnpj_fornecedor,NF_ENTRADA.dt_fato_gerador_imposto,NF_ENTRADA.dh_emissao,NF_ENTRADA.cfop_codigo,NF_ENTRADA.operacao,NF_ENTRADA.DENTRO_ESTADO,NF_ENTRADA.stc_codigo,NF_ENTRADA.cod_barra,NF_ENTRADA.nbm_codigo,NF_ENTRADA.merc_codigo,NF_ENTRADA.descricao,NF_ENTRADA.idf_num,NF_ENTRADA.mov,NF_ENTRADA.vl_unit,NF_ENTRADA.embalagem,NF_ENTRADA.quantidade,NF_ENTRADA.volume,V_VL_ESTOQUE,NF_ENTRADA.entsai_uni_codigo,NF_ENTRADA.estoque_uni_codigo,NF_ENTRADA.preco_total,NF_ENTRADA.vl_contabil,NF_ENTRADA.vl_ajuste_preco_total,NF_ENTRADA.vl_base_icms,NF_ENTRADA.aliq_icms,NF_ENTRADA.vl_icms,NF_ENTRADA.vl_base_st,NF_ENTRADA.vl_base_st,NF_ENTRADA.vl_st,NF_ENTRADA.aliq_stf,NF_ENTRADA.vl_ipi,V_VL_BC_ST_UNIT,NF_ENTRADA.status,NF_ENTRADA.MES_ANO_ARQUIVO,SYSDATE,'1');

					   INSERT INTO USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT(REC_ID,DET_ID,ID_ENTRADA,filial,MERC_CODIGO,volume,ESTOQUE,VL_BC_ST,VL_BC_ST_UNIT,DT_FATO_GERADOR,DT_REGISTRO,FAZ_PARTE_PEDIDO,VL_BC_ST_UNIT_MEDIO,VL_BASE_ACUMULADA,QTD_ACUMULADA,SALDO_SAIDA,ID_COUNT) VALUES(V_REC_ID,V_DET_ID,V_ID_ENTRADA,NF_ENTRADA.FILIAL,NF_SAIDA.MERC_CODIGO,NF_ENTRADA.VOLUME,V_VL_ESTOQUE,NF_ENTRADA.vl_base_st,V_VL_BC_ST_UNIT,NF_ENTRADA.dt_fato_gerador_imposto,SYSDATE,'S',V_VL_BC_ST_UNIT_MEDIO,V_VL_BASE_ACUMULADO,V_VL_QTD_ACUMULADO,V_VL_SALDO_SAIDA,V_QTD_REF);

					   --INSERT INTO USRASSISTENTEFISCAL.Excedente_MG_LOG VALUES(V_REC_ID,V_DET_ID,V_ID_ENTRADA,'LOJA PASSO NOVO',NF_SAIDA.FILIAL,NF_SAIDA.MERC_CODIGO,NF_SAIDA.DATA,NF_ENTRADA.ESTOQUE,NF_SAIDA.VOLUME,V_VL_SALDO_SAIDA,V_VL_ESTOQUE,NF_ENTRADA.ATUALIZAR_ESTOQUE);
				   END;
				END IF;  -- Fim Fluxo Normal

			  --INSERT INTO USRASSISTENTEFISCAL.Excedente_MG_LOG VALUES(V_REC_ID,V_DET_ID,NULL,V_REF_ID_ENTRADA,null,NF_SAIDA.FILIAL,NF_SAIDA.MERC_CODIGO,NF_ENTRADA.cfop_codigo,NF_SAIDA.DATA,NF_ENTRADA.VOLUME,NF_ENTRADA.VL_BASE_ST,V_VL_QTD_ACUMULADO,V_VL_BASE_ACUMULADO,NF_ENTRADA.ATUALIZAR_ESTOQUE,V_NOTA_JA_ASSOCIADA);

				IF NF_ENTRADA.cfop_codigo = '1.409' -- BUSCA ENTRADA DO CD. TRAZER OS VALORES DE IMPOSTO E ATUALIZAR NA ENTRADA DA LOJA
				THEN
				  -- Fluxo buscando do CD para notas de transferência
				  BEGIN
					V_BUSCA_ENTRADA := 1;

					-- DESPREZAR DADOS DA NOTA DE ENTRADA DA LOJA
					V_SOMA_BC_ST_UNIT_CD := 0;
					V_QTD_NOTA_CD        := 0;

					WHILE V_VL_SALDO_REF_ESTOQUE_CD > 0 AND V_BUSCA_ENTRADA = 1
					LOOP
					BEGIN
						V_BUSCA_ENTRADA       := 0;

						-- BUSCA ÚLTIMA ENTRADA NO CD
						FOR NF_ENTRADA_CD IN (select * from table(USRASSISTENTEFISCAL.FN_EXCEDENTE_ENT_CD(NF_SAIDA.DATA, NF_ENTRADA.dt_fato_gerador_imposto, NF_SAIDA.MERC_CODIGO)) )
						LOOP
						  BEGIN
							V_BUSCA_ENTRADA := 1;
							
							IF NF_ENTRADA_CD.ESTOQUE >= V_VL_SALDO_REF_ESTOQUE_CD
							THEN
							  BEGIN
								  V_VL_ESTOQUE     			:= NF_ENTRADA_CD.ESTOQUE - V_VL_SALDO_REF_ESTOQUE_CD;
								  V_VL_SALDO_REF_ESTOQUE_CD :=  0;
							  END;
							ELSE
							  BEGIN
								  V_VL_ESTOQUE     			:= 0;
								  V_VL_SALDO_REF_ESTOQUE_CD := V_VL_SALDO_REF_ESTOQUE_CD - NF_ENTRADA_CD.ESTOQUE;
							  END;
							END IF;

							IF NVL(NF_ENTRADA_CD.VOLUME,0) <> 0 THEN V_VL_BC_ST_UNIT := NF_ENTRADA_CD.VL_BASE_ST/NF_ENTRADA_CD.VOLUME; ELSE V_VL_BC_ST_UNIT := 0;  END IF;

							-- ENCONTRAR O MÉDIO QUANDO TIVER MAIS DE UMA NOTA DO CD
							V_SOMA_BC_ST_UNIT_CD := V_SOMA_BC_ST_UNIT_CD + NVL(NF_ENTRADA_CD.VL_BASE_ST,0);
							V_QTD_NOTA_CD        := V_QTD_NOTA_CD        + NVL(NF_ENTRADA_CD.VOLUME,0);

							IF NF_ENTRADA_CD.ATUALIZAR_ESTOQUE = 1
							THEN
								BEGIN
									UPDATE USRASSISTENTEFISCAL.EXCEDENTE_MG_ENTRADA_DET
										SET ESTOQUE = V_VL_ESTOQUE
									WHERE
										ID = NF_ENTRADA_CD.ID;
										
									BEGIN
										SELECT
											id_CD_REF
											INTO
											   V_REF
										FROM
											USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT
											WHERE
												REC_ID      	= V_REC_ID
												AND DET_ID    	= V_DET_ID
												AND ID_ENTRADA  = V_REF_ID_ENTRADA
												AND id_CD_REF   = NF_ENTRADA_CD.ID
												AND ROWNUM < 2;

										EXCEPTION
											WHEN NO_DATA_FOUND THEN V_REF := 0;
									END;

									IF NVL(V_REF,0) = 0
									THEN
										BEGIN	
											UPDATE USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT
												SET id_CD_REF  = NF_ENTRADA_CD.ID,
													estoque_cd = V_VL_ESTOQUE
											WHERE
												REC_ID      	= V_REC_ID
												AND DET_ID    	= V_DET_ID
												AND ID_ENTRADA  = V_REF_ID_ENTRADA;
										END;
									ELSE
										BEGIN
											UPDATE USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT
												SET estoque_cd = V_VL_ESTOQUE
											WHERE
												REC_ID      	= V_REC_ID
												AND DET_ID    	= V_DET_ID
												AND ID_ENTRADA  = V_REF_ID_ENTRADA
												AND id_CD_REF   = NF_ENTRADA_CD.ID;
										END;
									END IF;

								  --INSERT INTO USRASSISTENTEFISCAL.Excedente_MG_LOG VALUES(V_REC_ID,V_DET_ID,NF_ENTRADA_CD.ID,V_REF_ID_ENTRADA,'LOJA PASSO UPDATE',NF_ENTRADA_CD.FILIAL,NF_SAIDA.MERC_CODIGO,NULL,NF_SAIDA.DATA,NULL,NULL,NULL,NULL,NULL,NULL);
								END;
							ELSE
								BEGIN
								   select USRASSISTENTEFISCAL.SEQ_EXCEDENTE_MG_ENTRADA_DET.NEXTVAL INTO V_ID_ENTRADA from dual;

									IF NF_ENTRADA_CD.ID = '-1'
									THEN
										BEGIN
											UPDATE USRASSISTENTEFISCAL.EXCEDENTE_MG_ENTRADA_DET
												SET ATIVO = '0'
											WHERE ATIVO 			   = '1' 
												 AND DOF_IMPORT_NUMERO = NF_ENTRADA_CD.DOF_IMPORT_NUMERO
												 AND MERC_CODIGO	   = NF_ENTRADA_CD.MERC_CODIGO;
										END;
									END IF;
						
								   INSERT INTO USRASSISTENTEFISCAL.EXCEDENTE_MG_ENTRADA_DET VALUES(V_ID_ENTRADA,NF_ENTRADA_CD.dof_sequence,NF_ENTRADA_CD.dof_numero,NF_ENTRADA_CD.dof_import_numero,NF_ENTRADA_CD.EDOF_CODIGO,NF_ENTRADA_CD.mdof_codigo,NF_ENTRADA_CD.serie,NF_ENTRADA_CD.filial,NF_ENTRADA_CD.INFORMANTE_EST_CODIGO,NF_ENTRADA_CD.cpf_cgc,NF_ENTRADA_CD.cnpj_fornecedor,NF_ENTRADA_CD.dt_fato_gerador_imposto,NF_ENTRADA_CD.dh_emissao,NF_ENTRADA_CD.cfop_codigo,NF_ENTRADA_CD.operacao,NF_ENTRADA_CD.DENTRO_ESTADO,NF_ENTRADA_CD.stc_codigo,NF_ENTRADA_CD.cod_barra,NF_ENTRADA_CD.nbm_codigo,NF_ENTRADA_CD.merc_codigo,NF_ENTRADA_CD.descricao,NF_ENTRADA_CD.idf_num,NF_ENTRADA_CD.mov,NF_ENTRADA_CD.vl_unit,NF_ENTRADA_CD.embalagem,NF_ENTRADA_CD.quantidade,NF_ENTRADA_CD.volume,V_VL_ESTOQUE,NF_ENTRADA_CD.entsai_uni_codigo,NF_ENTRADA_CD.estoque_uni_codigo,NF_ENTRADA_CD.preco_total,NF_ENTRADA_CD.vl_contabil,NF_ENTRADA_CD.vl_ajuste_preco_total,NF_ENTRADA_CD.vl_base_icms,NF_ENTRADA_CD.aliq_icms,NF_ENTRADA_CD.vl_icms,NF_ENTRADA_CD.vl_base_st,NF_ENTRADA_CD.vl_base_st,NF_ENTRADA_CD.vl_st,NF_ENTRADA_CD.aliq_stf,NF_ENTRADA_CD.vl_ipi,V_VL_BC_ST_UNIT,NF_ENTRADA_CD.status,NF_ENTRADA_CD.MES_ANO_ARQUIVO,SYSDATE,'1');

								   UPDATE USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT
									SET id_CD_REF  = V_ID_ENTRADA,
										estoque_cd = V_VL_ESTOQUE
								  WHERE
									REC_ID          = V_REC_ID
									AND DET_ID      = V_DET_ID
									AND ID_ENTRADA  = V_REF_ID_ENTRADA;

								  -- INSERT INTO USRASSISTENTEFISCAL.Excedente_MG_LOG VALUES(V_REC_ID,V_DET_ID,V_ID_ENTRADA,V_REF_ID_ENTRADA,'LOJA PASSO UPDATE '||V_ID_ENTRADA,NF_ENTRADA_CD.FILIAL,NF_SAIDA.MERC_CODIGO,NULL,NF_SAIDA.DATA,NULL,NULL,NULL,NULL,NULL,NULL);
								 END;
							END IF; -- FIM ÚLTIMA ENTRADA NO CD
						  END;
						END LOOP; -- FIM WHILE BUSCA ÚLTIMA ENTRADA NO CD
					END;
					END LOOP;
					
					IF NVL(V_QTD_NOTA_CD,0) <> 0 THEN V_VL_BC_ST_UNIT := V_SOMA_BC_ST_UNIT_CD / V_QTD_NOTA_CD; ELSE V_VL_BC_ST_UNIT := 0;  END IF;

					V_VL_BASE_ST_CALCULADA := NVL(NF_ENTRADA.VOLUME,0) * V_VL_BC_ST_UNIT;

					-- Atualizando imposto na ENTRADA da LOJA
					UPDATE USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT A
					SET
					  VL_BC_ST_UNIT_CD     	= V_VL_BC_ST_UNIT,
					  VL_BC_ST_UNIT    		= (CASE WHEN VOLUME = 0 THEN 0 ELSE (V_VL_BASE_ST_CALCULADA/VOLUME) END),
					  VL_BC_ST             	= V_VL_BASE_ST_CALCULADA,
					  VL_BASE_ACUMULADA_CD 	= V_SOMA_BC_ST_UNIT_CD,
					  QTD_ACUMULADA_CD   	= V_QTD_NOTA_CD
					WHERE
					  A.REC_ID          = V_REC_ID
					  AND A.DET_ID      = V_DET_ID
					  AND A.ID_ENTRADA  = V_REF_ID_ENTRADA;

					UPDATE USRASSISTENTEFISCAL.EXCEDENTE_MG_ENTRADA_DET
					  SET 
						vl_base_st    	= V_VL_BASE_ST_CALCULADA,
						VL_BC_ST_UNIT 	= (CASE WHEN VOLUME = 0 THEN 0 ELSE (V_VL_BASE_ST_CALCULADA/VOLUME) END)
					WHERE ID = V_REF_ID_ENTRADA;

					END; -- Fim Fluxo buscando do CD para notas de transferência
				END IF;

			  --COMMIT; -- REMOVER (SOMENTE PARA DEBUG

            EXIT WHEN NVL(V_VL_SALDO_SAIDA,0) = 0;
          END;
          END LOOP; -- FIM BUSCA ÚLTIMA ENTRADA PARA LOJA

        END;
       END LOOP; -- FIM WHILE BUSCA A ÚLTIMA ENTRADA

      IF NVL(V_ENCONTROU_ENTRADA,0) = 0 THEN INSERT INTO USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT(REC_ID,DET_ID,DT_REGISTRO,FAZ_PARTE_PEDIDO) VALUES(V_REC_ID,V_DET_ID,SYSDATE,'N'); END IF;

    END;
    END LOOP; -- Fim Associando a Saída do Item a última entrada



--// dia 27/06/2023
-- Fazer o cálculo da média a medida que for associando a saída. 
-- Esse trecho de código talves não sirva mais.

-- fazer o controle do estoque também no CD. Para teste, fazer um estudo considerando 2 meses e buscando a nota com o menor volume.


  -- Calculando BASE_ST MEDIO para todas as entradas que foram associadas a saída do item
  FOR NF_ENTRADA IN ( 
					SELECT 
						--DISTINCT A.REC_ID, A.ID_ENTRADA, E.VOLUME, E.VL_BASE_ST, E.VL_BC_ST_UNIT
						DISTINCT A.REC_ID, A.ID_COUNT,A.ID_ENTRADA, A.VOLUME, A.vl_bc_st VL_BASE_ST, A.VL_BC_ST_UNIT
					FROM USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT A
					--INNER JOIN USRASSISTENTEFISCAL.EXCEDENTE_MG_ENTRADA_DET E ON A.ID_ENTRADA = E.ID AND A.FILIAL = E.FILIAL
					WHERE 
						A.REC_ID     = V_REC_ID
						AND A.FILIAL = MERCADORIA.FILIAL
					ORDER BY A.ID_COUNT
	)
	LOOP
	BEGIN
		V_VL_BASE_ACUMULADO   := V_VL_BASE_ACUMULADO + NVL(NF_ENTRADA.VL_BASE_ST,0);
		V_VL_QTD_ACUMULADO    := V_VL_QTD_ACUMULADO  + NVL(NF_ENTRADA.VOLUME,0);
		V_VL_BC_ST_UNIT_MEDIO := (CASE WHEN V_VL_QTD_ACUMULADO = 0 THEN V_VL_BC_ST_UNIT_MEDIO ELSE V_VL_BASE_ACUMULADO / V_VL_QTD_ACUMULADO END );

		UPDATE USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT
		  SET
			VL_BASE_ACUMULADA   = V_VL_BASE_ACUMULADO,
			QTD_ACUMULADA       = V_VL_QTD_ACUMULADO,
			VL_BC_ST_UNIT_MEDIO = V_VL_BC_ST_UNIT_MEDIO
		WHERE
		  REC_ID         = NF_ENTRADA.REC_ID
		  AND ID_ENTRADA = NF_ENTRADA.ID_ENTRADA;
	END;
	END LOOP; -- Fim calculo

  -- Buscando o Médio. CONSIDERANDO A ÚLTIMA ASSOCIAÇÃO
  BEGIN
    SELECT
      VL_BC_ST_UNIT_MEDIO INTO V_VL_MEDIO
    FROM
    (
      SELECT
        DISTINCT ID_ENTRADA,ID_COUNT, VL_BC_ST_UNIT_MEDIO
      FROM USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT	  
      WHERE
        REC_ID     = V_REC_ID
        AND FILIAL = MERCADORIA.FILIAL
      ORDER BY ID_COUNT DESC
    )
    WHERE ROWNUM < 2;

    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    BEGIN
      V_VL_MEDIO := 0;
    END;
  END;

  -- CALCULANDO O VALOR A RECUPERAR
  FOR NF_SAIDA_RECUP IN (select DET_ID,VOLUME,VL_CONTABIL from USRASSISTENTEFISCAL.EXCEDENTE_MG_SAIDA_DET WHERE REC_ID = V_REC_ID )
  LOOP
      BEGIN
      V_ALIQ_ST := 0;

      -- Buscando a ALIQ
      BEGIN
        SELECT
          MIN(B.ALIQ_STF) INTO V_ALIQ_ST -- Usando a menor ALIQ
        FROM USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT A
        INNER JOIN USRASSISTENTEFISCAL.EXCEDENTE_MG_ENTRADA_DET B ON A.ID_ENTRADA = B.ID OR NVL(A.id_CD_REF,-1) = B.ID
        WHERE
          REC_ID          = V_REC_ID
          AND A.DET_ID    = NF_SAIDA_RECUP.DET_ID
          AND B.ALIQ_STF  > 0;

        EXCEPTION
        WHEN NO_DATA_FOUND THEN
        BEGIN
          V_ALIQ_ST := 0;
        END;
      END;

      V_VL_BC_ST_ACORDO_VENDIDA := V_VL_MEDIO                 *  NF_SAIDA_RECUP.VOLUME;
      V_VL_DIFERENCA_ENTRE_BASE := V_VL_BC_ST_ACORDO_VENDIDA  -  NF_SAIDA_RECUP.VL_CONTABIL;
      V_VL_CREDITO              := V_VL_DIFERENCA_ENTRE_BASE  *  (NVL(V_ALIQ_ST,0)/100);

      UPDATE USRASSISTENTEFISCAL.EXCEDENTE_MG_SAIDA_DET
      SET
        VL_BASE_ST_UNIT   = V_VL_MEDIO,
        VL_BASE_ST_VENDA  = V_VL_BC_ST_ACORDO_VENDIDA,
        VL_DIF_BASE       = V_VL_DIFERENCA_ENTRE_BASE,
        VL_CREDITO        = V_VL_CREDITO,
		aliq_stf_entrada  = V_ALIQ_ST
      WHERE
        REC_ID      = V_REC_ID
        AND DET_ID  = NF_SAIDA_RECUP.DET_ID;

      END;
  END LOOP; -- FIM BUSCA ÚLTIMA ENTRADA PARA LOJA

  --Quando o somatório der negativo, deve marcar as notas de saída que teve VL_CREDITO Negativo como 'N' também, para não fazer parte do pedido.
  -- Início Removendo da composição as Saídas que deram Negativo no total do valor a recuperar
  FOR NF_SAIDA IN (
				  -- LISTANDO SAÍDAS COM VALOR NEGATIVO NO SOMATÓRIO DO VL_CREDITO POR LOJA, DIA E MERCADORIA
				  SELECT
					DISTINCT A.REC_ID, A.DET_ID
				  FROM USRASSISTENTEFISCAL.EXCEDENTE_MG_SAIDA_DET A
				  INNER JOIN
				  (
					  SELECT
						FILIAL, DATA, MERC_CODIGO, SUM(VL_CREDITO) TOTAL_CREDITO
					  FROM USRASSISTENTEFISCAL.EXCEDENTE_MG_SAIDA_DET
					  WHERE
						 REC_ID = V_REC_ID
					  GROUP BY
						FILIAL, DATA, MERC_CODIGO
					  HAVING SUM(VL_CREDITO) < 0
				  ) B ON A.FILIAL = B.FILIAL AND A.MERC_CODIGO = B.MERC_CODIGO AND A.DATA = B.DATA

				  UNION

				  -- LISTANDO SAÍDAS QUE TIVERAM O SOMATÓRIO POSITIVO, MAS TIVERAM O VL_CREDITO NEGATIVO.
				  SELECT 
					A.REC_ID, A.DET_ID
				  FROM USRASSISTENTEFISCAL.EXCEDENTE_MG_SAIDA_DET A
				  INNER JOIN (
					  SELECT
						 FILIAL, DATA, MERC_CODIGO, SUM(VL_CREDITO) TOTAL_CREDITO
					  FROM USRASSISTENTEFISCAL.EXCEDENTE_MG_SAIDA_DET B
					  WHERE
						REC_ID = V_REC_ID
					  GROUP BY
						FILIAL, DATA, MERC_CODIGO
					  HAVING SUM(VL_CREDITO) > 0
				  ) B ON A.FILIAL = B.FILIAL AND A.MERC_CODIGO = B.MERC_CODIGO AND A.DATA = B.DATA
				  WHERE A.VL_CREDITO < 0
  )
  LOOP
  BEGIN
    UPDATE USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT
      SET FAZ_PARTE_PEDIDO = 'N'
    WHERE
      REC_ID     = NF_SAIDA.REC_ID
      AND DET_ID = NF_SAIDA.DET_ID;
    END;
  END LOOP; -- Fim Removendo da composição as Saídas que deram Negativo no valor a recuperar


  -- RECUPERANDO O ESTOQUE DO ITEM
  BEGIN
    SELECT
		SUM(ESTOQUE), 
		SUM(VOLUME), 
		SUM(VL_BASE_ST) 
		INTO V_VL_ESTOQUE_ACUMULADO,V_VL_QTD_ACUMULADO,V_VL_BASE_ST_CALCULADA
    FROM
	(
		SELECT DISTINCT E.*
		FROM USRASSISTENTEFISCAL.Excedente_MG_SAIDAXENT A
		INNER JOIN  USRASSISTENTEFISCAL.EXCEDENTE_MG_ENTRADA_DET E ON A.ID_ENTRADA = E.ID AND A.MERC_CODIGO = E.MERC_CODIGO
		where
		  A.REC_ID 		= V_REC_ID
		  AND A.FILIAL NOT IN('607','688','504','529')
	);

    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    BEGIN
    V_VL_ESTOQUE_ACUMULADO  := 0;
    V_VL_QTD_ACUMULADO      := 0;
    V_VL_BASE_ST_CALCULADA  := 0;
    END;
  END;

  INSERT INTO USRASSISTENTEFISCAL.Excedente_MG_MERC(rec_id,filial,DT_INICIO,DT_TERMINO,merc_codigo,BASE_ST_ACUMULADA, VOLUME_ACUMULADO,estoque_inicial,estoque_final,dt_registro) VALUES(V_REC_ID,P_FILIAL,to_date(DT_INICIAL, FORMATO),LAST_DAY(TO_DATE(DT_INICIAL, FORMATO)),MERCADORIA.MERC_CODIGO,V_VL_BASE_ST_CALCULADA,V_VL_QTD_ACUMULADO,V_VL_ESTOQUE_INICIAL,V_VL_ESTOQUE_ACUMULADO,SYSDATE);


  COMMIT;

  END;
  END LOOP;
  CLOSE CUR_MERCADORIA;
END;



